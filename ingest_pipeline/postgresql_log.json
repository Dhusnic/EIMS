{
  "description": "Pipeline for parsing PostgreSQL logs.",
  "processors": [
    {
      "set": {
        "value": "{{_ingest.timestamp}}",
        "field": "event.ingested"
      }
    },
    {
      "grok": {
        "pattern_definitions": {
          "CHAR": ".",
          "GREEDYDATA": "(.|\n|\t)*",
          "DATETIME": "[-0-9]+ %{TIME} %{WORD:event.timezone}"
        },
        "field": "message",
        "patterns": [
          "^%{DATETIME:postgresql.log.timestamp}%{CHAR:separator}%{GREEDYDATA:raw_message}"
        ]
      }
    },
    {
      "pipeline": {
        "if": "ctx.separator != ','",
        "name": "filebeat-8.14.0-postgresql-log-pipeline-log"
      }
    },
    {
      "pipeline": {
        "name": "filebeat-8.14.0-postgresql-log-pipeline-csv",
        "if": "ctx.separator == ','"
      }
    },
    {
      "date": {
        "field": "postgresql.log.timestamp",
        "target_field": "@timestamp",
        "formats": [
          "yyyy-MM-dd HH:mm:ss.SSS zz",
          "yyyy-MM-dd HH:mm:ss zz"
        ]
      }
    },
    {
      "script": {
        "lang": "painless",
        "source": "ctx.event.duration = Math.round(ctx.temp.duration * params.scale)",
        "params": {
          "scale": 1000000
        },
        "if": "ctx.temp?.duration != null"
      }
    },
    {
      "remove": {
        "field": "temp.duration",
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "event.kind",
        "value": "event"
      }
    },
    {
      "append": {
        "value": [
          "database"
        ],
        "field": "event.category"
      }
    },
    {
      "set": {
        "field": "event.type",
        "value": [
          "info"
        ],
        "if": "ctx?.postgresql?.log?.sql_state_code == null || (ctx.postgresql.log.sql_state_code ==~ /^0[012].*/)"
      }
    },
    {
      "set": {
        "value": [
          "error"
        ],
        "if": "ctx?.postgresql?.log?.sql_state_code != null && ! (ctx.postgresql.log.sql_state_code ==~ /^0[012].*/)",
        "field": "event.type"
      }
    },
    {
      "append": {
        "field": "related.user",
        "value": "{{user.name}}",
        "if": "ctx?.user?.name != null"
      }
    },
    {
      "remove": {
        "field": [
          "separator"
        ]
      }
    },
    {
      "remove": {
        "field": [
          "raw_message"
        ]
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "value": "{{ _ingest.on_failure_message }}",
        "field": "error.message"
      }
    }
  ]
}